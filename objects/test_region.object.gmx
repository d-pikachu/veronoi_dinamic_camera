<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>orientation = HORIZONTAL
//region = LEFT

//DUMMIES
dummy_point = new_point(0,0);
dummy_line = new_point(dummy_point,dummy_point);

splitter = dummy_line

p1 = dummy_point
p2 = dummy_point
p3 = dummy_point
p4 = dummy_point

draw = 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EXPERIMENT SURFACE
player_b_view = -1
player_a_view = -1


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///REGION POINTS
splitter = camera.splitter

Ax = splitter[X1]
Ay = splitter[Y1]
Bx = splitter[X2]
By = splitter[Y2]
Px = player_b.x
Py = player_b.y

rr = (Bx-Ax)*(Py-Ay)-(By-Ay)*(Px-Ax)

p1[X] = splitter[X1]
p1[Y] = splitter[Y1]
p2[X] = splitter[X2]
p2[Y] = splitter[Y2]

if orientation == HORIZONTAL{
    if player_b.y&gt;=player_a.y{
        reg = "DOWN"
        
        p3 = o_frame.bottom_right
        p4 = o_frame.bottom_left
    }
    else  {
        reg = "UP"
        
        p4 = o_frame.top_right
        p3 = o_frame.top_left
    }
} else if orientation == VERTICAL{
    if player_b.x&gt;=player_a.x{
        reg = "RIGHT"
        
        p3 = o_frame.top_right
        p4 = o_frame.bottom_right
    }
    else {
        reg = "LEFT"
        
        p4 = o_frame.top_left
        p3 = o_frame.bottom_left
    }
}

if keyboard_check_pressed(vk_space)
draw = !draw
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OLD
/*
splitter = camera.splitter

Ax = splitter[X1]
Ay = splitter[Y1]
Bx = splitter[X2]
By = splitter[Y2]
Px = player_b.x
Py = player_b.y

rr = (Bx-Ax)*(Py-Ay)-(By-Ay)*(Px-Ax)


if orientation == HORIZONTAL{
    if player_b.y&gt;=player_a.y{
        reg = "DOWN"
    }
    else  {
        reg = "UP"
    }
} else {
    if player_b.x&gt;=player_a.x{
        reg = "RIGHT"
    }
    else {
        reg = "LEFT"
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EXPERIMENT SURFACE
//dismidx= 1//(player_a.x + player_b.x)/2
//dismidy = 1//(player_a.y + player_b.Y)/2

dismid = camera.players_mid

if should_split(){
    dism1 = point_distance(player_a.x,player_a.y,dismid[X],dismid[Y])
    
    //real mid point
    disa1 = point_direction(player_a.x,player_a.y,dismid[X],dismid[Y])
    //screen mid point
    //disa1 = point_direction(player_a.x-view_xview[1] , player_a.y-view_yview[1] , 
    //W/2,H/2)
    
    disp1 = poop(dism1 , 0.7) * (W+H)/8
    
    pa_cam_x = player_a.x  - W/2 + lengthdir_x(disp1,disa1)
    pa_cam_y = player_a.y  - H/2 + lengthdir_y(disp1,disa1) 
    /*pa_cam_x = player_a.x  + lengthdir_x(disp1,disa1)
    pa_cam_y = player_a.y  + lengthdir_y(disp1,disa1) */
    
    dism2 = point_distance(player_b.x,player_b.y,dismid[X],dismid[Y])
    disa2 = point_direction(player_b.x,player_b.y,dismid[X],dismid[Y])
    disp2 = poop(dism1 , 0.7) * (W+H)/8
    
    pb_cam_x = player_b.x  - W/2 + lengthdir_x(disp2,disa2)
    pb_cam_y = player_b.y  - H/2 + lengthdir_y(disp2,disa2)
    /*pb_cam_x = player_b.x + lengthdir_x(disp2,disa2)
    pb_cam_y = player_b.y + lengthdir_y(disp2,disa2)*/
}
else {
/*
    pa_cam_x = player_a.x - W/2
    pa_cam_y = player_a.y - H/2
    pb_cam_x = player_b.x - W/2
    pb_cam_y = player_b.y - H/2
*/
    
    pa_cam_x = dismid[X] - W/2
    pa_cam_y = dismid[Y] - H/2
    pb_cam_x = dismid[X] - W/2
    pb_cam_y = dismid[Y] - H/2
}

/*view_xview[1] = pa_cam_x 
view_yview[1] = pa_cam_y
view_xview[0] = pb_cam_x 
view_yview[0] = pb_cam_y*/
ssppdd = 1
view_xview[1] += (pa_cam_x - view_xview[1]) * ssppdd
view_yview[1] += (pa_cam_y - view_yview[1]) * ssppdd
view_xview[0] += (pb_cam_x - view_xview[0]) * ssppdd
view_yview[0] += (pb_cam_y - view_yview[0]) * ssppdd







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EXPERIMENT SURFACE

if !surface_exists(player_b_view){
    player_b_view = surface_create(W,H)
    view_surface_id[0] = player_b_view
}
else {
/*
    surface_set_target(player_b_view)
    draw_set_color(c_blue)
    draw_set_alpha(0.05)
    draw_rectangle(0,0,W,H,false)
    draw_set_alpha(1)
    draw_set_color(c_black)
    surface_reset_target();
*/
}

if !surface_exists(player_a_view){
    player_a_view = surface_create(W,H)
    view_surface_id[1] = player_a_view
}
else {
    surface_set_target(player_a_view)
    
    /*draw_set_color(c_red)
    draw_set_alpha(0.05)
    draw_rectangle(0,0,W,H,false)
    draw_set_alpha(1)
    draw_set_color(c_black)*/
    
    draw_set_blend_mode(bm_subtract)
    draw_primitive_begin(pr_trianglestrip);
    draw_vertex(p1[X] , p1[Y]);
    draw_vertex(p2[X] , p2[Y]);
    draw_vertex(p3[X] , p3[Y]);
    draw_vertex(p4[X] , p4[Y]);
    draw_vertex(p1[X] , p1[Y]);
    draw_primitive_end();
    draw_set_blend_mode(bm_normal)
    
    surface_reset_target();
}


/*if keyboard_check(ord('1')) draw_surface(player_a_view,0,0)
if keyboard_check(ord('2')) draw_surface(player_b_view,0,0)*/
draw_surface(player_b_view,0,0)
if should_split() draw_surface(player_a_view,0,0)




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DYNAMIC WIDTH SPLITTER
//rect intersection

//changeit = ((W+H)/8) - point_distance(player_a.x,player_a.y,dismid[X],dismid[Y])
changeit =  point_distance(player_a.x,player_a.y,dismid[X],dismid[Y]) - ((W+H)/8)

ww = liner(changeit , 5) // * 15
splito = camera.splitter
alp = poop(changeit, 1)
//changeit = point_distance(player_a.x,player_a.y,dismid[X],dismid[Y])
//if should_split(){
    //draw_line_pika(splitter);
    //ww = (poop(changeit , 0.7) * 10) + 1
    //ww = (liner(changeit , 1))
    draw_set_alpha(alp)
    //ww = min(1,ww)
    draw_line_width(splito[X1], splito[Y1], splito[X2], splito[Y2], ww);
    draw_set_alpha(1)
//}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ori = "ERROR"
switch(orientation){
    case VERTICAL : ori = "VERTICAL"; break;
    case HORIZONTAL : ori = "HORIZONTAL";
}
draw_text(10,30,"Split : " + ori);

/* not working
reg = "ERROR"
switch(region){
    case TOP : reg = "TOP"; break;
    case RIGHT : reg = "RIGHT"; break;
    case DOWN : reg = "DOWN"; break;
    case LEFT : reg = "LEFT";
}*/

draw_text(10,50,"Region : " + reg);
draw_text(10,70,"RR : " + string(rr));

draw_text(10,90,"WW : " + string(ww));
draw_text(10,110,"Alp : " + string(alp));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW REGION
draw = keyboard_check(vk_space)// should_split()
if draw{
draw_set_color(c_blue)
draw_set_alpha(0.2)

//view offset or relative to view
vpx = view_xview[0]
vpy = view_yview[0]

draw_primitive_begin(pr_trianglestrip);
/*
draw_vertex(p1[X] , p1[Y]);
draw_vertex(p2[X] , p2[Y]);
draw_vertex(p3[X] , p3[Y]);
draw_vertex(p4[X] , p4[Y]);
draw_vertex(p1[X] , p1[Y]);
*/

draw_vertex(p1[X] + vpx , p1[Y] + vpy);
draw_vertex(p2[X] + vpx  , p2[Y] + vpy);
draw_vertex(p3[X] + vpx  , p3[Y] + vpy);
draw_vertex(p4[X] + vpx  , p4[Y] + vpy);
//draw_vertex(p1[X] + vpx  , p1[Y] + vpy);

draw_primitive_end();

draw_set_color(c_black)
draw_set_alpha(1)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
