<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>orientation = HORIZONTAL
//region = LEFT

//DUMMIES
var dummy_point = new_point(0,0);
var dummy_line = new_point(dummy_point,dummy_point);

splitter = dummy_line

p1 = dummy_point
p2 = dummy_point
p3 = dummy_point
p4 = dummy_point

draw = 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EXPERIMENT SURFACE
player_b_view = -1
player_a_view = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>splitter = camera.splitter

Ax = splitter[X1]
Ay = splitter[Y1]
Bx = splitter[X2]
By = splitter[Y2]
Px = player_b.x
Py = player_b.y

rr = (Bx-Ax)*(Py-Ay)-(By-Ay)*(Px-Ax)

p1[X] = splitter[X1]
p1[Y] = splitter[Y1]
p2[X] = splitter[X2]
p2[Y] = splitter[Y2]

if orientation == HORIZONTAL{
    if player_b.y&gt;=player_a.y{
        reg = "DOWN"
        
        p3 = o_frame.bottom_right
        p4 = o_frame.bottom_left
    }
    else  {
        reg = "UP"
        
        p3 = o_frame.top_right
        p4 = o_frame.top_left
    }
} else if orientation == VERTICAL{
    if player_b.x&gt;=player_a.x{
        reg = "RIGHT"
        
        p3 = o_frame.top_right
        p4 = o_frame.bottom_right
    }
    else {
        reg = "LEFT"
        
        p3 = o_frame.top_left
        p4 = o_frame.bottom_left
    }
}

if keyboard_check_pressed(vk_space)
draw = !draw
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OLD
/*
splitter = camera.splitter

Ax = splitter[X1]
Ay = splitter[Y1]
Bx = splitter[X2]
By = splitter[Y2]
Px = player_b.x
Py = player_b.y

rr = (Bx-Ax)*(Py-Ay)-(By-Ay)*(Px-Ax)


if orientation == HORIZONTAL{
    if player_b.y&gt;=player_a.y{
        reg = "DOWN"
    }
    else  {
        reg = "UP"
    }
} else {
    if player_b.x&gt;=player_a.x{
        reg = "RIGHT"
    }
    else {
        reg = "LEFT"
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ori = "ERROR"
switch(orientation){
    case VERTICAL : ori = "VERTICAL"; break;
    case HORIZONTAL : ori = "HORIZONTAL";
}
draw_text(10,30,"Split : " + ori);

/* not working
reg = "ERROR"
switch(region){
    case TOP : reg = "TOP"; break;
    case RIGHT : reg = "RIGHT"; break;
    case DOWN : reg = "DOWN"; break;
    case LEFT : reg = "LEFT";
}*/

draw_text(10,50,"Region : " + reg);
draw_text(10,70,"RR : " + string(rr));

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EXPERIMENT SURFACE

if !surface_exists(player_b_view){
    player_b_view = surface_create(W,H)
    view_surface_id[0] = player_b_view
}
else {
    surface_set_target(player_b_view)
    
    draw_set_color(c_blue)
    draw_set_alpha(0.05)
    draw_rectangle(0,0,W,H,false)
    draw_set_alpha(1)
    draw_set_color(c_black)
    
    surface_reset_target();
}

if !surface_exists(player_a_view){
    player_a_view = surface_create(W,H)
    view_surface_id[1] = player_a_view
}
else {
    surface_set_target(player_a_view)
    
    draw_set_color(c_red)
    draw_set_alpha(0.05)
    draw_rectangle(0,0,W,H,false)
    draw_set_alpha(1)
    draw_set_color(c_black)
    
    draw_set_blend_mode(bm_subtract)
    draw_primitive_begin(pr_trianglestrip);
    draw_vertex(p1[X] , p1[Y]);
    draw_vertex(p2[X] , p2[Y]);
    draw_vertex(p3[X] , p3[Y]);
    draw_vertex(p4[X] , p4[Y]);
    draw_vertex(p1[X] , p1[Y]);
    draw_primitive_end();
    draw_set_blend_mode(bm_normal)
    
    surface_reset_target();
}


/*if keyboard_check(ord('1')) draw_surface(player_a_view,0,0)
if keyboard_check(ord('2')) draw_surface(player_b_view,0,0)*/
draw_surface(player_b_view,0,0)
if should_split() draw_surface(player_a_view,0,0)




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw = keyboard_check(vk_space)// should_split()
if draw{
draw_set_color(c_blue)
draw_set_alpha(0.2)

draw_primitive_begin(pr_trianglestrip);
draw_vertex(p1[X] , p1[Y]);
draw_vertex(p2[X] , p2[Y]);
draw_vertex(p3[X] , p3[Y]);
draw_vertex(p4[X] , p4[Y]);
draw_vertex(p1[X] , p1[Y]);
draw_primitive_end();

draw_set_color(c_black)
draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
