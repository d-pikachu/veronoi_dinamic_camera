<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
var split_angle = 0;

var players_mid = new_point(0,0);
var frame_mid = new_point(0,0)

var p1_pos = new_point(0,0)
var p2_pos = new_point(0,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//////STEP
////step vars
//middle of camera frame (for spliting) ***change!!! to real values
frame_mid[X] = W/2;
frame_mid[Y] = H/2;

//middle point between players
players_mid[X] = (player_a.x + player_b.x)/2;
players_mid[Y] = (player_a.y + player_b.y)/2;

//point intersection split line and line between players
p1_pos[X] = player_a.x
p1_pos[Y] = player_a.y
p2_pos[X] = player_b.x
p2_pos[Y] = player_b.y
/*-----------------------------------------------------------------------------*/

//////split stuff
////split
//added 90 here cause perpendicular 
split_angle = point_direction(player_a.x,player_a.y,player_b.x,player_b.y) + 90;

//interseting points on frame
rect_point_a = rect_intersect_from_angle(frame_mid , split_angle);
rect_point_b = rect_intersect_from_angle(frame_mid , split_angle+180);

//point intersection split line and line between players 
intersection_point = point_intersection(p1_pos , p2_pos , rect_point_a , rect_point_b)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug
draw_text(10,10,string(split_angle))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/////////////DRAW CALLS

// real middle point between player
//filled if beyond split length
draw_circle(players_mid[X],players_mid[Y],5,!should_split());

    
//rect intersection
if should_split(){
    draw_rect_mini(rect_point_a[X] ,rect_point_a[Y]);
    draw_rect_mini(rect_point_b[X] ,rect_point_b[Y]);
    draw_line(rect_point_a[X] ,rect_point_a[Y],rect_point_b[X] ,rect_point_b[Y]);
}

if intersection_point[X] != false{
    draw_rect_mini(intersection_point[X],intersection_point[Y]);
}

//players seperation range
draw_circle(player_a.x,player_a.y,(W+H),true)
draw_circle(player_b.x,player_b.y,(W+H),true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
